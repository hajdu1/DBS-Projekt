# Generated by Django 3.1.7 on 2021-03-26 22:15

from django.db import migrations, connection


def create_companies(apps, schema_editor):

    sql = """
    CREATE TABLE ov.companies(
        cin bigint NOT NULL
            CONSTRAINT companies_pkey
                PRIMARY KEY,
        name varchar,
        br_section varchar,
        address_line varchar,
        last_update timestamp without time zone,
        created_at timestamp without time zone,
        updated_at timestamp without time zone
    ); 
    
    INSERT INTO ov.companies(cin, name, br_section, address_line, last_update, created_at, updated_at)
    (SELECT cin, corporate_body_name, br_section, address_line, last_update, 
    current_timestamp AS created_at, current_timestamp AS updated_at
        FROM
          (SELECT cin, corporate_body_name, br_section, CONCAT(street, ', ', postal_code, ' ', city) AS address_line, 
                updated_at AS last_update, rank() OVER (PARTITION BY cin ORDER BY updated_at DESC) AS position
             FROM ov.or_podanie_issues
          ) AS sub
        WHERE position = 1 AND cin IS NOT null)
    ON CONFLICT(cin) DO NOTHING;
        
    INSERT INTO ov.companies(cin, name, br_section, address_line, last_update, created_at, updated_at)
    (SELECT cin, corporate_body_name, br_section, address_line, last_update, 
    current_timestamp AS created_at, current_timestamp AS updated_at
        FROM
          (SELECT cin, corporate_body_name, br_section, CONCAT(street, ', ', postal_code, ' ', city) AS address_line, 
                updated_at AS last_update, rank() OVER (PARTITION BY cin ORDER BY updated_at DESC) AS position
             FROM ov.likvidator_issues
          ) AS sub
        WHERE position = 1 AND cin IS NOT null)
    ON CONFLICT(cin) DO NOTHING;
        
    INSERT INTO ov.companies(cin, name, br_section, address_line, last_update, created_at, updated_at)
    (SELECT cin, corporate_body_name, br_section, address_line, last_update, 
    current_timestamp AS created_at, current_timestamp AS updated_at
        FROM
          (SELECT cin, corporate_body_name, null as br_section, CONCAT(street, ', ', postal_code, ' ', city) AS address_line, 
                updated_at AS last_update, rank() OVER (PARTITION BY cin ORDER BY updated_at DESC) AS position
             FROM ov.konkurz_vyrovnanie_issues
          ) AS sub
        WHERE position = 1 AND cin IS NOT null)
    ON CONFLICT(cin) DO NOTHING;
        
    INSERT INTO ov.companies(cin, name, br_section, address_line, last_update, created_at, updated_at)
    (SELECT cin, corporate_body_name, br_section, address_line, last_update, 
    current_timestamp AS created_at, current_timestamp AS updated_at
        FROM
          (SELECT cin, corporate_body_name, br_section, CONCAT(street, ', ', postal_code, ' ', city) AS address_line, 
                updated_at AS last_update, rank() OVER (PARTITION BY cin ORDER BY updated_at DESC) AS position
             FROM ov.znizenie_imania_issues
          ) AS sub
        WHERE position = 1 AND cin IS NOT null)
    ON CONFLICT(cin) DO NOTHING;
        
    INSERT INTO ov.companies(cin, name, br_section, address_line, last_update, created_at, updated_at)
    (SELECT cin, corporate_body_name, br_section, address_line, last_update, 
    current_timestamp AS created_at, current_timestamp AS updated_at
        FROM
          (SELECT cin, corporate_body_name, null as br_section, CONCAT(street, ', ', postal_code, ' ', city) AS address_line, 
                updated_at AS last_update, rank() OVER (PARTITION BY cin ORDER BY updated_at DESC) AS position
             FROM ov.konkurz_restrukturalizacia_actors
          ) AS sub
        WHERE position = 1 AND cin IS NOT null)
    ON CONFLICT(cin) DO NOTHING;
    
    ALTER TABLE ov.or_podanie_issues
    ADD COLUMN company_id bigint
        CONSTRAINT fk_or_podanie_issues_cid
            REFERENCES ov.companies;
    CREATE INDEX ix_or_podanie_issues
    ON ov.or_podanie_issues (company_id);
    
    ALTER TABLE ov.likvidator_issues
    ADD COLUMN company_id bigint
        CONSTRAINT fk_kikvidator_issues_cid
            REFERENCES ov.companies;
    CREATE INDEX ix_likvidator_issues_cid
    ON ov.likvidator_issues (company_id);
    
    ALTER TABLE ov.konkurz_vyrovnanie_issues
    ADD COLUMN company_id bigint
        CONSTRAINT fk_konkurz_vyrovnanie_issues_cid
            REFERENCES ov.companies;
    CREATE INDEX ix_konkurz_vyrovnanie_issues_cid
    ON ov.konkurz_vyrovnanie_issues (company_id);
    
    ALTER TABLE ov.znizenie_imania_issues
    ADD COLUMN company_id bigint
        CONSTRAINT fk_znizenie_imania_issues
            REFERENCES ov.companies;
    CREATE INDEX ix_znizenie_imania_issues_cid
    ON ov.znizenie_imania_issues (company_id);
    
    ALTER TABLE ov.konkurz_restrukturalizacia_actors
    ADD COLUMN company_id bigint
        CONSTRAINT fk_konkurz_restrukturalizacia_actors_cid
            REFERENCES ov.companies;
    CREATE INDEX ix_konkurz_restrukturalizacia_actors_cid
    ON ov.konkurz_restrukturalizacia_actors (company_id);
    
    UPDATE ov.or_podanie_issues SET company_id = ov.or_podanie_issues.cin;
    UPDATE ov.likvidator_issues SET company_id = ov.likvidator_issues.cin;
    UPDATE ov.konkurz_vyrovnanie_issues SET company_id = ov.konkurz_vyrovnanie_issues.cin;
    UPDATE ov.znizenie_imania_issues SET company_id = ov.znizenie_imania_issues.cin;
    UPDATE ov.konkurz_restrukturalizacia_actors SET company_id = ov.konkurz_restrukturalizacia_actors.cin;"""

    with connection.cursor() as cursor:
        cursor.execute(sql)


def reverse_companies(apps, schema_editor):

    sql = """
    ALTER TABLE ov.or_podanie_issues
    DROP COLUMN IF EXISTS company_id;
    
    ALTER TABLE ov.likvidator_issues
    DROP COLUMN IF EXISTS company_id;
    
    ALTER TABLE ov.konkurz_vyrovnanie_issues
    DROP COLUMN IF EXISTS company_id;
    
    ALTER TABLE ov.znizenie_imania_issues
    DROP COLUMN IF EXISTS company_id;
    
    ALTER TABLE ov.konkurz_restrukturalizacia_actors
    DROP COLUMN IF EXISTS company_id;
    
    DROP TABLE IF EXISTS ov.companies"""

    with connection.cursor() as cursor:
        cursor.execute(sql)


class Migration(migrations.Migration):

    dependencies = [
        ('app', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_companies, reverse_companies)
    ]
